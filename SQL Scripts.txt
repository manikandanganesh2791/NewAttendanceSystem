create table attendance_s(
ID int,
CardSourceID int,
CardHolderID int,
DateIn varchar(12),
InTime varchar(5),
ReportField1 varchar(100),
ReportField2 varchar(100),
DateOut varchar(12),
OutTime varchar(5),
HoursWorked int);

LOAD DATA LOCAL INFILE '~/attendance_s_clean.csv' INTO TABLE attendance_s 
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"' 
LINES TERMINATED BY '\n'
IGNORE 1 LINES;


--Creating Date Dimension File
create table date_dimension( 
Id int not null auto_increment, 
Date varchar(12), 
PRIMARY KEY(Id));

--Loading Data from List of school days .csv file into the date_dimension table
LOAD DATA LOCAL INFILE '~/List of school days .csv' INTO TABLE date_dimension LINES TERMINATED BY '\n'
IGNORE 1 LINES
(@col1) set Date=@col1;

drop table if exists s_tardy;
create table s_tardy(
ID int not null auto_increment,
attendance_sid int,
CardHolderID int,
InDate varchar(12),
InTime varchar(5),
Status varchar(5),
ReportField1 varchar(100),
ReportField2 varchar(100),
PRIMARY KEY(ID));

insert into s_tardy(attendance_sid,CardHolderID,InDate,InTime,Status,ReportField1,ReportField2)
SELECT ID, CardHolderID, DateIn, InTime, "tardy", ReportField1, ReportField2
from attendance_s
where (DateIn IS NOT NULL and DateOut IS NULL) || ((DateIn IS NOT NULL and DateOut IS NOT NULL) and (DateIn != DateOut));

drop table if exists s_early_departure;
create table s_early_departure(ID int not null auto_increment,
attendance_sid int,
CardHolderID int,
OutDate varchar(12),
OutTime varchar(5),
Status varchar(15),
ReportField1 varchar(100),
ReportField2 varchar(100),
PRIMARY KEY(ID));

insert into s_early_departure(attendance_sid, CardHolderID, OutDate, OutTime, Status,ReportField1,ReportField2)
select ID, CardHolderID, DateOut, OutTime, "Early departure", ReportField1, ReportField2
from attendance_s
where (DateOut IS NOT NULL and DateIn IS NULL) || ((DateOut IS NOT NULL and DateIn IS NOT NULL) and (DateOut != DateIn));

drop table if exists s_tardy_early_departure;
create table s_tardy_early_departure(ID int not null auto_increment,
attendance_sid int,
CardHolderID int,
InOutDate varchar(12),
InTime varchar(5),
OutTime varchar(5),
Status varchar(25),
ReportField1 varchar(100),
ReportField2 varchar(100),
PRIMARY KEY(ID));

insert into s_tardy_early_departure(attendance_sid,CardHolderID, InOutDate, InTime, OutTime, Status,ReportField1,ReportField2)
select ID, CardHolderID, DateIn, InTime, OutTime, "tardy and Early departure", ReportField1, ReportField2
from attendance_s
where (DateOut IS NOT NULL and DateIn IS NOT NULL) and (DateIn = DateOut);

drop table if exists attendance_s_intermediate;
create table attendance_s_intermediate(
ID int not null auto_increment,
CardHolderID int,
Event_Date varchar(12),
Status varchar(25),
PRIMARY KEY(ID));

insert into attendance_s_intermediate(CardHolderID, Event_Date, Status)
select CardHolderID, InDate, Status from s_tardy
union all
select CardHolderID, OutDate, Status from s_early_departure
union all
select CardHolderID, InOutDate, Status from s_tardy_early_departure;

select CardHolderID, Event_Date, count(*) 
from attendance_s_intermediate
group by CardHolderID, Event_Date having count(*) >= 2;

select (select count(*)
from
(select CardHolderID, Event_Date, count(*)
from attendance_s_intermediate
group by CardHolderID, Event_Date
having count(*) >= 2) as A)/
(select count(*)
from
attendance_s_intermediate)* 100 as Error_Percentage;


alter table attendance_s_intermediate
add column duplicate_check varchar(5);

create table combinedname
(ID int not null auto_increment, 
name varchar(250),
PRIMARY KEY(ID));

insert into combinedname(name)
select concat(CardHolderID,'|',Event_Date) from attendance_s_intermediate;

update attendance_s_intermediate
set duplicate_check = 'True'
where concat(CardHolderID, '|', Event_Date)in
(select name
from combined_name
group by name
having count(*) >=2);

update attendance_s_intermediate
set duplicate_check = 'False'
where concat(CardHolderID, '|', Event_Date) not in
(select name
from combined_name
group by name
having count(*) >=2);

select * from attendance_s_intermediate where duplicate_check = 'True' order by CardHolderID
into outfile '/var/lib/mysql-files/intermediate_inconsistent.csv'
fields terminated by ','
enclosed by '"'
lines terminated by '\n';

select * from attendance_s_intermediate where duplicate_check = 'False'
into outfile '/var/lib/mysql-files/intermediate_consistent.csv'
fields terminated by ','
enclosed by '"'
lines terminated by '\n';

drop table if exists attendance_s_consistent;
create table attendance_s_consistent(
ID int not null auto_increment,
CardHolderID int,
Event_Date varchar(12),
Status varchar(25),
PRIMARY KEY(ID));
LOAD DATA LOCAL INFILE '/vagrant_data/attendance_s_consistent.csv'
INTO TABLE attendance_s_consistent
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n'
IGNORE 1 LINES
(@col1,@col2,@col3) set CardHolderID=@col1,Event_Date=@col2,Status=@col3;

select CardHolderID, Date, count(*)
from attendance_c
group by CardHolderID, Date
having count(*) >=2;

select (select count(*) from
(select CardHolderID, Date, count(*)
from attendance_c
group by CardHolderID, Date
having count(*) >= 2) as A)/(select count(*) from attendance_c) * 100 as Error_Percentage;

drop table if exists attendance_c;
create table attendance_c(
ID int not null auto_increment,
CardHolderID int,
Date varchar(12),
Status varchar(25),
PRIMARY KEY(ID));
LOAD DATA LOCAL INFILE '/vagrant_data/attendance_c.csv' 
INTO TABLE attendance_c 
FIELDS TERMINATED BY ','
ENCLOSED BY '"' 
LINES TERMINATED BY '\n' 
IGNORE 1 LINES
(@col1,@col2,@col3) set CardHolderID=@col1,Date=@col2,Status=@col3;

alter table attendance_c
add column combined_name varchar(100);
update attendance_c
set combined_name = concat(CardHolderID, '|', Date);

drop table if exists combined_name_c;
create table combined_name_c (name varchar(100));
insert into combined_name_c(name)
select combined_name
from attendance_c
group by combined_name
having count(*) >= 2

select * from attendance_c
where combined_name in
(select name from combined_name_c)
order by CardHolderID
into outfile '/var/lib/mysql-files/attendance_c_inconsistent.csv'
fields terminated by ','
enclosed by '"'
lines terminated by '\n';

select * from attendance_c
where combined_name not in
(select name from combined_name_c)
into outfile '/var/lib/mysql-files/attendance_c_consistent.csv'
fields terminated by ','
enclosed by '"'
lines terminated by '\n';

drop table if exists attendance_c_intermediate;
create table attendance_c_intermediate(
ID int not null auto_increment,
CardHolderID int,
Event_Date varchar(12),
Status varchar(50),
PRIMARY KEY(ID));
LOAD DATA LOCAL INFILE '/vagrant_data/attendance_c_intermediate.csv'
INTO TABLE attendance_c_intermediate
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n'
IGNORE 1 LINES
(@col1,@col2,@col3) set CardHolderID=@col1,Event_Date=@col2,Status=@col3;

drop table if exists attendance_k;
create table attendance_k(
ID int not null auto_increment,
CardHolderID int,
Date varchar(12),
Status varchar(50),
PRIMARY KEY(ID));
LOAD DATA LOCAL INFILE '/vagrant_data/attendance_k.csv' 
INTO TABLE attendance_k
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"' 
LINES TERMINATED BY '\n' 
IGNORE 1 LINES
(@col1,@col2,@col3,@col4) set CardHolderID=@col1,Status=@col2,Date=@col4;

select * 
from attendance_k 
into outfile '/var/lib/mysql-files/attendance_k_inconsistent.csv'
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n';

select * 
from attendance_k  
where concat(CardHolderID,'|',Date) IN  
(select concat(CardHolderID,'|',Date)
from attendance_k  
group by concat(CardHolderID,'|',Date) 
having count(*)>=2)
into outfile '/var/lib/mysql-files/inconsistent_k.csv'
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n';

drop table if exists attendance_k_intermediate;
create table attendance_k_intermediate(
ID int not null auto_increment,
CardHolderID int,
Date varchar(12),
Status varchar(50),
PRIMARY KEY(ID));
LOAD DATA LOCAL INFILE '/vagrant_data/attendance_k_intermediate.csv' 
INTO TABLE attendance_k_intermediate
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n' 
(@col1,@col2,@col3) set CardHolderID=@col1,Date=@col2,Status=@col3;


drop table if exists attendance_main;
create table attendance_main(
ID int not null auto_increment,
CardHolderID int,
Date varchar(12),
Status varchar(50),
PRIMARY KEY(ID));

insert into attendance_main(CardHolderID,Date,Status)
select CardHolderID, Date, Status from attendance_k_intermediate
union all
select CardHolderID, Event_Date, Status from attendance_s_intermediate
where concat(CardHolderID,'|',Event_Date) not in
(select concat(CardHolderID,'|',Date) from attendance_k_intermediate)
union all
select CardHolderID, Event_Date, Status from attendance_c_intermediate
where concat(CardHolderID,'|',Event_Date) not in
(select concat(CardHolderID,'|',Date) from attendance_k_intermediate
union all
select concat(CardHolderID,'|',Event_Date) from attendance_s_intermediate);

select (select count(*) from attendance_k_intermediate) + 
(select count(*) from attendance_s_intermediate) + 
(select count(*) from attendance_c_intermediate) as total_number_records;

select (select count(*) from attendance_k_intermediate) + 
(select count(*) from attendance_s_intermediate) + 
(select count(*) from attendance_c_intermediate) -
(select count(*) from attendance_main) as records_eliminated;

(select Date, 
case
	when DAYOFWEEK(Date) = 1 then 'Sunday'
	when DAYOFWEEK(Date) = 2 then 'Monday'
	when DAYOFWEEK(Date) = 3 then 'Tuesday'
	when DAYOFWEEK(Date) = 4 then 'Wednesday'
	when DAYOFWEEK(Date) = 5 then 'Thursday'
	when DAYOFWEEK(Date) = 6 then 'Friday'
	when DAYOFWEEK(Date) = 7 then 'Saturday'
end as Day, 
count(Status) as Count_of_Absent
from
(select STR_TO_DATE(Str_Date, '%m/%d/%Y') as Date,Status
from
(select REPLACE(Date,'"','') as Str_Date, Status
from attendance_main
where Status LIKE '%Absen%') as A) as B
where YEAR(Date) = 2016
group by Date
order by count(Status) desc
limit 1)
union all
(select Date, 
case
	when DAYOFWEEK(Date) = 1 then 'Sunday'
	when DAYOFWEEK(Date) = 2 then 'Monday'
	when DAYOFWEEK(Date) = 3 then 'Tuesday'
	when DAYOFWEEK(Date) = 4 then 'Wednesday'
	when DAYOFWEEK(Date) = 5 then 'Thursday'
	when DAYOFWEEK(Date) = 6 then 'Friday'
	when DAYOFWEEK(Date) = 7 then 'Saturday'
end as Day, 
count(Status) as count_of_absent
from
(select STR_TO_DATE(Str_Date, '%m/%d/%Y') as Date,Status
from
(select REPLACE(Date,'"','') as Str_Date, Status
from attendance_main
where Status LIKE '%Absen%') as A) as B
where YEAR(Date) = 2017
group by Date
order by count(Status) desc
limit 1);

select case
	when DAYOFWEEK(Date) = 1 then 'Sunday'
	when DAYOFWEEK(Date) = 2 then 'Monday'
	when DAYOFWEEK(Date) = 3 then 'Tuesday'
	when DAYOFWEEK(Date) = 4 then 'Wednesday'
	when DAYOFWEEK(Date) = 5 then 'Thursday'
	when DAYOFWEEK(Date) = 6 then 'Friday'
	when DAYOFWEEK(Date) = 7 then 'Saturday'
end as DAY_OF_WEEK, 
count(Status) as Count_Of_Tardies_And_Absences
from
(select STR_TO_DATE(Str_Date, '%m/%d/%Y') as Date,Status
from
(select REPLACE(Date,'"','') as Str_Date, Status
from attendance_main
where Status LIKE '%Absen%' or Status LIKE '%ardy%') as A) as B
group by DAYOFWEEK(Date)
order by count(Status) desc
limit 1;

select Date
from date_dimension
where Date not in
(select distinct (replace(Date,'"',''))
from attendance_main);
